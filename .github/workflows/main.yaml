name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MONGO_URI: ${{ secrets.MONGO_URI }}
  MONGO_DB_CREDS: ${{ secrets.MONGO_DB_CREDS }}
  MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  # ECR_REPO_URL: '400014682771.dkr.ecr.us-east-2.amazonaws.com'
  # IMAGE_NAME: "${{ env.ECR_REPO_URL }}/solar-system"
  # AWS_REGION: 'us-east-2'
  NODE_VERSION: '20'

jobs:
  setup:
    name: Setup & Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:

      - name: Checkout Repository 
        uses: actions/checkout@v4

      - name: Set up Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Generate Cache Key
        id: cache-key
        run: echo "key=${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install NPM Dependencies
        run: npm install --no-audit

      - name: Run npm Audit for Critical Vulnerabilities
        run: |
          npm audit --audit-level=critical || true
          echo $?

  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Repository 
        uses: actions/checkout@v4

      - name: Set up Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install NPM Dependencies
        run: npm install --no-audit

      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        continue-on-error: true
        with:
          project: 'solar-system'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --disableYarnAudit
            --failOnCVSS 8
            --format XML
            --format JSON
            --format HTML
            --out reports
            --scan .
      
      - name: Upload OWASP Dependency Check results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-results
          path: reports/
          retention-days: 30
    
  unit-tests:
    name: Run Unit Tests with Coverage
    runs-on: ubuntu-latest
    needs: setup
    env:
      MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
      MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
      MONGO_DB_CREDS: ${{ secrets.MONGO_DB_CREDS }}
    steps:
      - name: Checkout Repository 
        uses: actions/checkout@v4
      
      - name: Set up Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install NPM Dependencies
        run: npm install --no-audit

      - name: Run Unit Tests
        run: |
          echo "::add-mask::$MONGO_DB_CREDS"
          echo "::add-mask::$MONGO_USERNAME"
          echo "::add-mask::$MONGO_PASSWORD"
          echo "MONGO credentials injected."
          npm test
      
      - name: Code Coverage
        continue-on-error: true
        run: npm run coverage

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          path: |
            coverage/
            coverage-summary.json
            coverage/lcov.info

  lint:
    name: Lint Code 
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install NPM Dependencies
        run: npm install --no-audit

      - name: Run ESLint 
        run: npm run lint